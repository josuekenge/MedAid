{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/components/ui/card.tsx"],"sourcesContent":["import { HTMLAttributes, forwardRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nconst Card = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'rounded-2xl border border-gray-200 bg-white text-gray-900 shadow-soft hover:shadow-medium transition-shadow duration-200',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nCard.displayName = 'Card';\n\nconst CardHeader = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('flex flex-col space-y-1.5 p-6', className)}\n      {...props}\n    />\n  )\n);\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h3\n      ref={ref}\n      className={cn('text-2xl font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  )\n);\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <p\n      ref={ref}\n      className={cn('text-sm text-gray-500', className)}\n      {...props}\n    />\n  )\n);\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n  )\n);\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('flex items-center p-6 pt-0', className)}\n      {...props}\n    />\n  )\n);\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;;;;AAEA,MAAM,qBAAO,IAAA,mNAAU,EACrB,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,kHAAE,EACX,4HACA;QAED,GAAG,KAAK;;;;;;AAIf,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,IAAA,mNAAU,EAC3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAIf,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,IAAA,mNAAU,EAC1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,kHAAE,EAAC,sDAAsD;QACnE,GAAG,KAAK;;;;;;AAIf,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,IAAA,mNAAU,EAChC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,kHAAE,EAAC,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAIf,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,IAAA,mNAAU,EAC5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,kHAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAGlE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,IAAA,mNAAU,EAC3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAIf,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/components/ui/modal.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { ReactNode } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { X } from 'lucide-react';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  children: ReactNode;\r\n  size?: 'sm' | 'md' | 'lg' | 'xl';\r\n}\r\n\r\nexport function Modal({ isOpen, onClose, title, children, size = 'md' }: ModalProps) {\r\n  if (!isOpen) return null;\r\n\r\n  const sizeClasses = {\r\n    sm: 'max-w-md',\r\n    md: 'max-w-lg',\r\n    lg: 'max-w-2xl',\r\n    xl: 'max-w-4xl',\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n      {/* Backdrop */}\r\n      <div \r\n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\r\n        onClick={onClose}\r\n      />\r\n      \r\n      {/* Modal */}\r\n      <div className={`relative bg-white rounded-lg shadow-xl w-full mx-4 ${sizeClasses[size]} max-h-[90vh] overflow-hidden`}>\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900\">{title}</h2>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onClose}\r\n            className=\"h-8 w-8 p-0\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n        \r\n        {/* Content */}\r\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-120px)]\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ConfirmDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onConfirm: () => void;\r\n  title: string;\r\n  message: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  variant?: 'default' | 'destructive';\r\n}\r\n\r\nexport function ConfirmDialog({ \r\n  isOpen, \r\n  onClose, \r\n  onConfirm, \r\n  title, \r\n  message, \r\n  confirmText = 'Confirm',\r\n  cancelText = 'Cancel',\r\n  variant = 'default'\r\n}: ConfirmDialogProps) {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n      {/* Backdrop */}\r\n      <div \r\n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\r\n        onClick={onClose}\r\n      />\r\n      \r\n      {/* Dialog */}\r\n      <div className=\"relative bg-white rounded-lg shadow-xl w-full max-w-md mx-4\">\r\n        <div className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{title}</h3>\r\n          <p className=\"text-gray-600 mb-6\">{message}</p>\r\n          \r\n          <div className=\"flex justify-end space-x-3\">\r\n            <Button variant=\"outline\" onClick={onClose}>\r\n              {cancelText}\r\n            </Button>\r\n            <Button \r\n              variant={variant === 'destructive' ? 'destructive' : 'default'}\r\n              onClick={() => {\r\n                onConfirm();\r\n                onClose();\r\n              }}\r\n            >\r\n              {confirmText}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AAJA;;;;AAcO,SAAS,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,IAAI,EAAc;IACjF,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,cAAc;QAClB,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBACC,WAAU;gBACV,SAAS;;;;;;0BAIX,8OAAC;gBAAI,WAAW,CAAC,mDAAmD,EAAE,WAAW,CAAC,KAAK,CAAC,6BAA6B,CAAC;;kCAEpH,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAuC;;;;;;0CACrD,8OAAC,qIAAM;gCACL,SAAQ;gCACR,MAAK;gCACL,SAAS;gCACT,WAAU;0CAEV,cAAA,8OAAC,iMAAC;oCAAC,WAAU;;;;;;;;;;;;;;;;;kCAKjB,8OAAC;wBAAI,WAAU;kCACZ;;;;;;;;;;;;;;;;;;AAKX;AAaO,SAAS,cAAc,EAC5B,MAAM,EACN,OAAO,EACP,SAAS,EACT,KAAK,EACL,OAAO,EACP,cAAc,SAAS,EACvB,aAAa,QAAQ,EACrB,UAAU,SAAS,EACA;IACnB,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBACC,WAAU;gBACV,SAAS;;;;;;0BAIX,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAA4C;;;;;;sCAC1D,8OAAC;4BAAE,WAAU;sCAAsB;;;;;;sCAEnC,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,qIAAM;oCAAC,SAAQ;oCAAU,SAAS;8CAChC;;;;;;8CAEH,8OAAC,qIAAM;oCACL,SAAS,YAAY,gBAAgB,gBAAgB;oCACrD,SAAS;wCACP;wCACA;oCACF;8CAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOf","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/services/mock-data.ts"],"sourcesContent":["import { z } from 'zod';\nimport { \n  PatientSchema, \n  NurseSchema, \n  VisitSchema, \n  CarePlanSchema, \n  CareTaskSchema, \n  VitalsSchema, \n  MedicationEventSchema, \n  IncidentSchema, \n  ServiceSchema, \n  BillingItemSchema, \n  AuditLogSchema \n} from '@/lib/schemas';\n\n// Generate realistic mock data for scalability testing\nconst generateMockPatients = (count: number) => {\n  const firstNames = [\n    'Sarah', 'Michael', 'Alice', 'Robert', 'John', 'Linda', 'David', 'Emily', 'James', 'Lisa',\n    'Maria', 'Alex', 'Jennifer', 'Christopher', 'Jessica', 'Daniel', 'Ashley', 'Matthew', 'Amanda', 'Joshua',\n    'Stephanie', 'Andrew', 'Nicole', 'Ryan', 'Elizabeth', 'Justin', 'Megan', 'Brandon', 'Rachel', 'Tyler',\n    'Lauren', 'Jacob', 'Samantha', 'Nicholas', 'Brittany', 'Zachary', 'Kayla', 'Kevin', 'Amber', 'Jonathan',\n    'Danielle', 'Nathan', 'Heather', 'Aaron', 'Melissa', 'Adam', 'Crystal', 'Sean', 'Tiffany', 'Timothy'\n  ];\n  \n  const lastNames = [\n    'Johnson', 'Brown', 'Smith', 'Davis', 'Wilson', 'Martinez', 'Anderson', 'Taylor', 'Thomas', 'Jackson',\n    'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis',\n    'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill',\n    'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts',\n    'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris'\n  ];\n\n  const conditions = [\n    'Diabetes Type 2', 'Hypertension', 'COPD', 'Heart Failure', 'Arthritis', 'Depression', 'Anxiety',\n    'Alzheimer\\'s Disease', 'Parkinson\\'s Disease', 'Cancer', 'Stroke Recovery', 'Chronic Pain',\n    'Osteoporosis', 'Asthma', 'Chronic Kidney Disease', 'Multiple Sclerosis', 'Epilepsy', 'Bipolar Disorder'\n  ];\n\n  const allergies = [\n    'Penicillin', 'Sulfa', 'Latex', 'Shellfish', 'Nuts', 'Dairy', 'Eggs', 'Soy', 'Wheat', 'Pollen',\n    'Dust Mites', 'Mold', 'Pet Dander', 'Aspirin', 'Ibuprofen', 'Codeine', 'Morphine', 'Insulin'\n  ];\n\n  return Array.from({ length: count }, (_, i) => {\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n    const name = `${firstName} ${lastName}`;\n    const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`;\n    const phone = `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`;\n    \n    const patientAllergies = Array.from({ length: Math.floor(Math.random() * 4) }, () => \n      allergies[Math.floor(Math.random() * allergies.length)]\n    ).filter((allergy, index, self) => self.indexOf(allergy) === index);\n\n    const primaryDiagnosis = conditions[Math.floor(Math.random() * conditions.length)];\n    const isHighRisk = patientAllergies.length > 3 || primaryDiagnosis.includes('Cancer') || primaryDiagnosis.includes('Heart Failure');\n\n    return {\n      id: `patient-${i + 1}`,\n      name,\n      email,\n      phone,\n      dateOfBirth: new Date(1940 + Math.floor(Math.random() * 50), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n      address: {\n        street: `${Math.floor(Math.random() * 9999) + 1} ${['Main', 'Oak', 'Pine', 'Elm', 'Maple', 'Cedar', 'Birch', 'Willow'][Math.floor(Math.random() * 8)]} St`,\n        city: ['Toronto', 'Montreal', 'Vancouver', 'Calgary', 'Ottawa', 'Edmonton', 'Winnipeg', 'Quebec City'][Math.floor(Math.random() * 8)],\n        province: ['ON', 'QC', 'BC', 'AB', 'MB', 'SK', 'NS', 'NB'][Math.floor(Math.random() * 8)],\n        postalCode: `${Math.floor(Math.random() * 9) + 1}${Math.floor(Math.random() * 9) + 1}${Math.floor(Math.random() * 9) + 1} ${Math.floor(Math.random() * 9) + 1}${Math.floor(Math.random() * 9) + 1}${Math.floor(Math.random() * 9) + 1}`,\n        country: 'Canada'\n      },\n      emergencyContact: {\n        name: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,\n        relationship: ['Spouse', 'Child', 'Parent', 'Sibling', 'Friend'][Math.floor(Math.random() * 5)],\n        phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`\n      },\n      primaryDiagnosis,\n      allergies: patientAllergies,\n      medications: Array.from({ length: Math.floor(Math.random() * 5) + 1 }, (_, j) => ({\n        name: ['Metformin', 'Lisinopril', 'Atorvastatin', 'Metoprolol', 'Omeprazole', 'Amlodipine', 'Losartan', 'Simvastatin'][Math.floor(Math.random() * 8)],\n        dosage: `${Math.floor(Math.random() * 500) + 50}mg`,\n        frequency: ['Daily', 'Twice Daily', 'As Needed', 'Weekly'][Math.floor(Math.random() * 4)],\n        prescribedBy: `Dr. ${lastNames[Math.floor(Math.random() * lastNames.length)]}`\n      })),\n      isActive: Math.random() > 0.1,\n      lastVisitAt: Math.random() > 0.3 ? new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000) : undefined,\n      createdAt: new Date(Date.now() - Math.floor(Math.random() * 365) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)\n    };\n  });\n};\n\nconst generateMockNurses = (count: number) => {\n  const firstNames = [\n    'Emily', 'David', 'Lisa', 'James', 'Maria', 'Alex', 'Jennifer', 'Christopher', 'Jessica', 'Daniel',\n    'Ashley', 'Matthew', 'Amanda', 'Joshua', 'Stephanie', 'Andrew', 'Nicole', 'Ryan', 'Elizabeth', 'Justin'\n  ];\n  \n  const lastNames = [\n    'Chen', 'Wilson', 'Anderson', 'Taylor', 'Rodriguez', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark',\n    'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill',\n    'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts'\n  ];\n\n  const specialties = [\n    'General Nursing', 'Critical Care', 'Pediatrics', 'Geriatrics', 'Emergency', 'Mental Health',\n    'Oncology', 'Cardiology', 'Orthopedics', 'Neurology', 'Dermatology', 'Endocrinology'\n  ];\n\n  const statuses = ['active', 'on_leave', 'inactive'] as const;\n  const statusWeights = [0.8, 0.15, 0.05]; // 80% active, 15% on leave, 5% inactive\n\n  return Array.from({ length: count }, (_, i) => {\n    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n    const name = `${firstName} ${lastName}`;\n    const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@medaid.ca`;\n    const phone = `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`;\n    \n    const random = Math.random();\n    let status: 'active' | 'on_leave' | 'inactive' = 'active';\n    if (random < statusWeights[0]) status = 'active';\n    else if (random < statusWeights[0] + statusWeights[1]) status = 'on_leave';\n    else status = 'inactive';\n\n    return {\n      id: `nurse-${i + 1}`,\n      name,\n      email,\n      phone,\n      licenseNumber: `RN${Math.floor(Math.random() * 900000) + 100000}`,\n      specialty: specialties[Math.floor(Math.random() * specialties.length)],\n      experienceYears: Math.floor(Math.random() * 20) + 1,\n      certifications: Array.from({ length: Math.floor(Math.random() * 4) + 1 }, () => \n        ['CCRN', 'CEN', 'CPN', 'CGN', 'CMHN', 'RN License'][Math.floor(Math.random() * 6)]\n      ).filter((cert, index, self) => self.indexOf(cert) === index),\n      status,\n      isActive: status === 'active',\n      lastLoginAt: status === 'active' ? new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000) : undefined,\n      createdAt: new Date(Date.now() - Math.floor(Math.random() * 365) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)\n    };\n  });\n};\n\nconst generateMockVisits = (count: number, patientIds: string[], nurseIds: string[], serviceIds: string[]) => {\n  const reasons = [\n    'Routine checkup', 'Blood pressure monitoring', 'Blood sugar check', 'Medication administration',\n    'Wound care', 'Physical therapy', 'Mental health check', 'Pain management', 'Vital signs check',\n    'Medication review', 'Fall risk assessment', 'Nutrition counseling', 'Disease management',\n    'Emergency response', 'Post-surgery care', 'Chronic condition monitoring', 'Medication adjustment',\n    'Symptom assessment', 'Care plan review', 'Family consultation'\n  ];\n\n  const statuses = ['requested', 'scheduled', 'en_route', 'in_progress', 'completed', 'cancelled', 'delayed'] as const;\n  const statusWeights = [0.05, 0.3, 0.1, 0.15, 0.35, 0.03, 0.02]; // Weighted distribution\n\n  return Array.from({ length: count }, (_, i) => {\n    const random = Math.random();\n    let status: 'requested' | 'scheduled' | 'en_route' | 'in_progress' | 'completed' | 'cancelled' | 'delayed' = 'scheduled';\n    let cumulativeWeight = 0;\n    for (let j = 0; j < statuses.length; j++) {\n      cumulativeWeight += statusWeights[j];\n      if (random < cumulativeWeight) {\n        status = statuses[j];\n        break;\n      }\n    }\n\n    const visitDate = new Date(Date.now() + (Math.floor(Math.random() * 30) - 15) * 24 * 60 * 60 * 1000);\n    const windowStart = new Date(visitDate);\n    windowStart.setHours(8 + Math.floor(Math.random() * 8), Math.floor(Math.random() * 4) * 15, 0, 0);\n    const windowEnd = new Date(windowStart);\n    windowEnd.setHours(windowStart.getHours() + 1 + Math.floor(Math.random() * 3), 0, 0, 0);\n\n    const checkInTime = status === 'in_progress' || status === 'completed' ? \n      new Date(windowStart.getTime() + Math.floor(Math.random() * 30) * 60 * 1000) : undefined;\n    \n    const checkOutTime = status === 'completed' ? \n      new Date((checkInTime || windowStart).getTime() + (30 + Math.floor(Math.random() * 90)) * 60 * 1000) : undefined;\n\n    return {\n      id: `visit-${i + 1}`,\n      patientId: patientIds[Math.floor(Math.random() * patientIds.length)],\n      nurseId: nurseIds[Math.floor(Math.random() * nurseIds.length)],\n      serviceId: serviceIds[Math.floor(Math.random() * serviceIds.length)],\n      carePlanId: Math.random() > 0.7 ? `careplan-${Math.floor(Math.random() * 100) + 1}` : undefined,\n      date: visitDate,\n      windowStart,\n      windowEnd,\n      status,\n      reasonForVisit: reasons[Math.floor(Math.random() * reasons.length)],\n      notes: Math.random() > 0.5 ? `Visit notes for ${reasons[Math.floor(Math.random() * reasons.length)]}` : undefined,\n      checkInTime,\n      checkOutTime,\n      location: Math.random() > 0.3 ? {\n        latitude: 43.6532 + (Math.random() - 0.5) * 0.1,\n        longitude: -79.3832 + (Math.random() - 0.5) * 0.1,\n        address: `${Math.floor(Math.random() * 9999) + 1} ${['Main', 'Oak', 'Pine', 'Elm', 'Maple'][Math.floor(Math.random() * 5)]} St, Toronto, ON`\n      } : undefined,\n      isUrgent: Math.random() < 0.1,\n      isAfterHours: Math.random() < 0.2,\n      createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n    };\n  });\n};\n\nconst generateMockBillingItems = (count: number, patientIds: string[], visitIds: string[]) => {\n  const serviceTypes = ['Visit', 'Consultation', 'Emergency', 'Follow-up', 'Assessment', 'Treatment'];\n  const statuses = ['pending', 'paid', 'overdue', 'cancelled'] as const;\n  const statusWeights = [0.4, 0.5, 0.08, 0.02]; // 40% pending, 50% paid, 8% overdue, 2% cancelled\n\n  return Array.from({ length: count }, (_, i) => {\n    const random = Math.random();\n    let status: 'pending' | 'paid' | 'overdue' | 'cancelled' = 'pending';\n    let cumulativeWeight = 0;\n    for (let j = 0; j < statuses.length; j++) {\n      cumulativeWeight += statusWeights[j];\n      if (random < cumulativeWeight) {\n        status = statuses[j];\n        break;\n      }\n    }\n\n    const baseAmount = 50 + Math.floor(Math.random() * 400);\n    const surcharge = Math.random() < 0.3 ? Math.floor(Math.random() * 50) : 0;\n    const amount = baseAmount + surcharge;\n\n    return {\n      id: `billing-${i + 1}`,\n      patientId: patientIds[Math.floor(Math.random() * patientIds.length)],\n      visitId: visitIds[Math.floor(Math.random() * visitIds.length)],\n      description: `${serviceTypes[Math.floor(Math.random() * serviceTypes.length)]} - ${['Routine care', 'Emergency response', 'Specialized treatment', 'Assessment', 'Follow-up care'][Math.floor(Math.random() * 5)]}`,\n      amount,\n      serviceType: serviceTypes[Math.floor(Math.random() * serviceTypes.length)],\n      status,\n      dueDate: new Date(Date.now() + Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n      paidAt: status === 'paid' ? new Date(Date.now() - Math.floor(Math.random() * 15) * 24 * 60 * 60 * 1000) : undefined,\n      createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n    };\n  });\n};\n\nconst generateMockIncidents = (count: number, patientIds: string[], nurseIds: string[]) => {\n  const categories = [\n    'fall', 'medication_error', 'equipment_failure', 'patient_refusal', 'safety_concern', 'other'\n  ];\n\n  const severities = ['low', 'medium', 'high', 'critical'] as const;\n  const severityWeights = [0.4, 0.35, 0.2, 0.05]; // 40% low, 35% medium, 20% high, 5% critical\n\n  const statuses = ['open', 'investigating', 'resolved', 'closed'] as const;\n  const statusWeights = [0.2, 0.3, 0.4, 0.1]; // 20% open, 30% investigating, 40% resolved, 10% closed\n\n  return Array.from({ length: count }, (_, i) => {\n    const severityRandom = Math.random();\n    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    let cumulativeWeight = 0;\n    for (let j = 0; j < severities.length; j++) {\n      cumulativeWeight += severityWeights[j];\n      if (severityRandom < cumulativeWeight) {\n        severity = severities[j];\n        break;\n      }\n    }\n\n    const statusRandom = Math.random();\n    let status: 'open' | 'investigating' | 'resolved' | 'closed' = 'open';\n    cumulativeWeight = 0;\n    for (let j = 0; j < statuses.length; j++) {\n      cumulativeWeight += statusWeights[j];\n      if (statusRandom < cumulativeWeight) {\n        status = statuses[j];\n        break;\n      }\n    }\n\n    return {\n      id: `incident-${i + 1}`,\n      patientId: patientIds[Math.floor(Math.random() * patientIds.length)],\n      nurseId: nurseIds[Math.floor(Math.random() * nurseIds.length)],\n      category: categories[Math.floor(Math.random() * categories.length)],\n      description: `Incident report: ${categories[Math.floor(Math.random() * categories.length)]} occurred during patient care`,\n      severity,\n      status,\n      actionTaken: Math.random() > 0.3 ? `Action taken: ${['Immediate response', 'Escalated to supervisor', 'Documented and monitored', 'Patient notified'][Math.floor(Math.random() * 4)]}` : undefined,\n      followUpRequired: Math.random() > 0.6,\n      reportedTo: Math.random() > 0.4 ? `Supervisor ${Math.floor(Math.random() * 10) + 1}` : undefined,\n      createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n      updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n    };\n  });\n};\n\n// Generate large datasets for scalability testing\nconst generatedPatients = generateMockPatients(500);\nconst generatedNurses = generateMockNurses(50);\nconst generatedVisits = generateMockVisits(1000, generatedPatients.map(p => p.id), generatedNurses.map(n => n.id), [\n  'service-1', 'service-2', 'service-3', 'service-4', 'service-5'\n]);\nconst generatedBillingItems = generateMockBillingItems(800, generatedPatients.map(p => p.id), generatedVisits.map(v => v.id));\nconst generatedIncidents = generateMockIncidents(150, generatedPatients.map(p => p.id), generatedNurses.map(n => n.id));\n\n// Services data (keeping original 5 services)\nexport const mockServices: z.infer<typeof ServiceSchema>[] = [\n  {\n    id: 'service-1',\n    name: 'Basic Home Care Visit',\n    basePrice: 120.00,\n    minMinutes: 30,\n    maxMinutes: 60,\n    description: 'Standard home care visit including basic health monitoring and assistance',\n    notes: 'Most common service type',\n    isActive: true,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  },\n  {\n    id: 'service-2',\n    name: 'Extended Care Visit',\n    basePrice: 180.00,\n    minMinutes: 60,\n    maxMinutes: 120,\n    description: 'Extended home care visit for complex care needs',\n    notes: 'Includes medication management and wound care',\n    isActive: true,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  },\n  {\n    id: 'service-3',\n    name: 'Emergency Response',\n    basePrice: 300.00,\n    minMinutes: 15,\n    maxMinutes: 45,\n    description: 'Urgent medical response and emergency care',\n    notes: '24/7 availability with rapid response',\n    isActive: true,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  },\n  {\n    id: 'service-4',\n    name: 'Specialized Care',\n    basePrice: 250.00,\n    minMinutes: 45,\n    maxMinutes: 90,\n    description: 'Specialized care for specific conditions (dementia, palliative, etc.)',\n    notes: 'Requires specialized training',\n    isActive: true,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  },\n  {\n    id: 'service-5',\n    name: 'Assessment & Planning',\n    basePrice: 200.00,\n    minMinutes: 60,\n    maxMinutes: 120,\n    description: 'Comprehensive health assessment and care plan development',\n    notes: 'Includes family consultation',\n    isActive: true,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  }\n];\n\n// Care Plans (generated for some patients)\nexport const mockCarePlans: z.infer<typeof CarePlanSchema>[] = Array.from({ length: 200 }, (_, i) => ({\n  id: `careplan-${i + 1}`,\n  patientId: generatedPatients[Math.floor(Math.random() * generatedPatients.length)].id,\n  title: `Care Plan ${i + 1}`,\n  description: `Comprehensive care plan for patient management`,\n  startDate: new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000),\n  endDate: new Date(Date.now() + Math.floor(Math.random() * 180) * 24 * 60 * 60 * 1000),\n  status: ['active', 'completed', 'paused'][Math.floor(Math.random() * 3)] as 'active' | 'completed' | 'paused',\n  goals: [\n    'Improve patient mobility',\n    'Manage chronic condition',\n    'Prevent complications',\n    'Enhance quality of life'\n  ].slice(0, Math.floor(Math.random() * 4) + 1),\n  createdAt: new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000),\n  updatedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)\n}));\n\n// Care Tasks (generated for care plans)\nexport const mockCareTasks: z.infer<typeof CareTaskSchema>[] = Array.from({ length: 800 }, (_, i) => ({\n  id: `task-${i + 1}`,\n  carePlanId: mockCarePlans[Math.floor(Math.random() * mockCarePlans.length)].id,\n  title: `Task ${i + 1}`,\n  description: `Care task description for patient management`,\n  dueDate: new Date(Date.now() + Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  status: ['pending', 'in_progress', 'completed', 'cancelled'][Math.floor(Math.random() * 4)] as 'pending' | 'in_progress' | 'completed' | 'cancelled',\n  priority: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as 'low' | 'medium' | 'high',\n  assignedTo: generatedNurses[Math.floor(Math.random() * generatedNurses.length)].id,\n  completedAt: Math.random() > 0.6 ? new Date(Date.now() - Math.floor(Math.random() * 15) * 24 * 60 * 60 * 1000) : undefined,\n  createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n}));\n\n// Vitals (generated for some visits)\nexport const mockVitals: z.infer<typeof VitalsSchema>[] = Array.from({ length: 600 }, (_, i) => ({\n  id: `vitals-${i + 1}`,\n  visitId: generatedVisits[Math.floor(Math.random() * generatedVisits.length)].id,\n  patientId: generatedPatients[Math.floor(Math.random() * generatedPatients.length)].id,\n  bloodPressure: {\n    systolic: 100 + Math.floor(Math.random() * 40),\n    diastolic: 60 + Math.floor(Math.random() * 20)\n  },\n  heartRate: 60 + Math.floor(Math.random() * 40),\n  temperature: 36.0 + Math.random() * 2.0,\n  respiratoryRate: 12 + Math.floor(Math.random() * 8),\n  oxygenSaturation: 95 + Math.floor(Math.random() * 5),\n  weight: 50 + Math.floor(Math.random() * 50),\n  height: 150 + Math.floor(Math.random() * 30),\n  notes: Math.random() > 0.7 ? 'Vital signs within normal range' : undefined,\n  recordedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  recordedBy: generatedNurses[Math.floor(Math.random() * generatedNurses.length)].id,\n  createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n}));\n\n// Medication Events (generated for some visits)\nexport const mockMedicationEvents: z.infer<typeof MedicationEventSchema>[] = Array.from({ length: 400 }, (_, i) => ({\n  id: `medication-${i + 1}`,\n  visitId: generatedVisits[Math.floor(Math.random() * generatedVisits.length)].id,\n  patientId: generatedPatients[Math.floor(Math.random() * generatedPatients.length)].id,\n  medicationName: ['Metformin', 'Lisinopril', 'Atorvastatin', 'Metoprolol', 'Omeprazole', 'Amlodipine', 'Losartan', 'Simvastatin'][Math.floor(Math.random() * 8)],\n  dosage: `${Math.floor(Math.random() * 500) + 50}mg`,\n  route: ['Oral', 'Subcutaneous', 'Intramuscular', 'Intravenous'][Math.floor(Math.random() * 4)],\n  administeredAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  administeredBy: generatedNurses[Math.floor(Math.random() * generatedNurses.length)].id,\n  notes: Math.random() > 0.6 ? 'Medication administered as prescribed' : undefined,\n  createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),\n  updatedAt: new Date(Date.now() - Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000)\n}));\n\n// Audit Logs (generated for various actions)\nexport const mockAuditLogs: z.infer<typeof AuditLogSchema>[] = Array.from({ length: 1000 }, (_, i) => ({\n  id: `audit-${i + 1}`,\n  entityType: ['patient', 'nurse', 'visit', 'billing', 'incident'][Math.floor(Math.random() * 5)] as 'patient' | 'nurse' | 'visit' | 'billing' | 'incident',\n  entityId: `entity-${Math.floor(Math.random() * 1000) + 1}`,\n  action: ['create', 'update', 'delete', 'view', 'export'][Math.floor(Math.random() * 5)] as 'create' | 'update' | 'delete' | 'view' | 'export',\n  userId: generatedNurses[Math.floor(Math.random() * generatedNurses.length)].id,\n  changes: Math.random() > 0.5 ? { field: 'status', oldValue: 'pending', newValue: 'completed' } : undefined,\n  ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n  createdAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)\n}));\n\n// Export all mock data with the expected names\nexport const mockPatients = generatedPatients;\nexport const mockNurses = generatedNurses;\nexport const mockVisits = generatedVisits;\nexport const mockBillingItems = generatedBillingItems;\nexport const mockIncidents = generatedIncidents;\n\n// Mock users for authentication\nexport const mockUsers: z.infer<typeof PatientSchema>[] = [\n  {\n    id: 'user-1',\n    name: 'Admin User',\n    email: 'admin@medaid.ca',\n    phone: '+1-555-0101',\n    dateOfBirth: new Date('1980-01-01'),\n    address: {\n      street: '123 Admin St',\n      city: 'Toronto',\n      province: 'ON',\n      postalCode: 'M5V 3A8',\n      country: 'Canada'\n    },\n    emergencyContact: {\n      name: 'Emergency Contact',\n      relationship: 'Spouse',\n      phone: '+1-555-0102'\n    },\n    primaryDiagnosis: 'Administrative',\n    allergies: [],\n    medications: [],\n    isActive: true,\n    lastVisitAt: new Date(),\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  },\n  {\n    id: 'user-2',\n    name: 'Demo Coordinator',\n    email: 'demo@medaid.ca',\n    phone: '+1-555-0202',\n    dateOfBirth: new Date('1985-05-15'),\n    address: {\n      street: '456 Coordinator Ave',\n      city: 'Toronto',\n      province: 'ON',\n      postalCode: 'M5V 3B9',\n      country: 'Canada'\n    },\n    emergencyContact: {\n      name: 'Emergency Contact',\n      relationship: 'Parent',\n      phone: '+1-555-0203'\n    },\n    primaryDiagnosis: 'Coordination',\n    allergies: [],\n    medications: [],\n    isActive: true,\n    lastVisitAt: new Date(),\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01')\n  }\n];"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1142, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/services/api-client.ts"],"sourcesContent":["// Define Certification type\nexport interface Certification {\n  id: string;\n  name: string;\n  description?: string;\n  issuingBody?: string;\n  licenseNumber?: string;\n  expiryDate?: Date;\n  status: 'active' | 'inactive';\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\nimport { \n  mockUsers,\n  mockPatients,\n  mockNurses,\n  mockServices,\n  mockVisits,\n  mockCarePlans,\n  mockCareTasks,\n  mockVitals,\n  mockMedicationEvents,\n  mockIncidents,\n  mockBillingItems\n} from './mock-data';\n\n// Mock certification data\nconst mockCertifications: Certification[] = [\n  {\n    id: '1',\n    name: 'Registered Nurse (RN) License',\n    description: 'Basic nursing license required to practice in Ontario',\n    issuingBody: 'College of Nurses of Ontario',\n    licenseNumber: 'RN123456',\n    expiryDate: new Date('2025-12-31'),\n    status: 'active',\n    notes: 'Annual renewal required',\n    createdAt: new Date('2020-01-15'),\n    updatedAt: new Date('2024-01-15')\n  },\n  {\n    id: '2',\n    name: 'Critical Care Nursing (CCRN)',\n    description: 'Specialized certification for critical care nursing',\n    issuingBody: 'American Association of Critical-Care Nurses',\n    licenseNumber: 'CCRN789',\n    expiryDate: new Date('2026-06-30'),\n    status: 'active',\n    notes: '3-year renewal cycle',\n    createdAt: new Date('2021-03-20'),\n    updatedAt: new Date('2023-06-30')\n  },\n  {\n    id: '3',\n    name: 'Pediatric Nursing (CPN)',\n    description: 'Specialized certification for pediatric care',\n    issuingBody: 'Pediatric Nursing Certification Board',\n    licenseNumber: 'CPN456',\n    expiryDate: new Date('2025-09-15'),\n    status: 'active',\n    notes: 'Requires 1 year pediatric experience',\n    createdAt: new Date('2022-01-10'),\n    updatedAt: new Date('2024-01-10')\n  },\n  {\n    id: '4',\n    name: 'Emergency Nursing (CEN)',\n    description: 'Specialized certification for emergency nursing',\n    issuingBody: 'Board of Certification for Emergency Nursing',\n    licenseNumber: 'CEN321',\n    expiryDate: new Date('2024-03-20'),\n    status: 'active',\n    notes: 'Expiring soon - renewal needed',\n    createdAt: new Date('2021-03-20'),\n    updatedAt: new Date('2023-03-20')\n  },\n  {\n    id: '5',\n    name: 'Geriatric Nursing (CGN)',\n    description: 'Specialized certification for geriatric care',\n    issuingBody: 'American Nurses Credentialing Center',\n    licenseNumber: 'CGN654',\n    expiryDate: new Date('2027-01-31'),\n    status: 'active',\n    notes: '5-year renewal cycle',\n    createdAt: new Date('2022-01-31'),\n    updatedAt: new Date('2024-01-31')\n  }\n];\n\n// Optimized API delay - reduced for better performance\nconst delay = (ms: number = 100) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Cache for frequently accessed data\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Cache helper functions\nconst getCachedData = (key: string) => {\n  const cached = cache.get(key);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data;\n  }\n  return null;\n};\n\nconst setCachedData = (key: string, data: any) => {\n  cache.set(key, { data, timestamp: Date.now() });\n};\n\n// Generic CRUD operations\nclass MockApiClient<T extends { id: string }> {\n  private data: T[];\n  private storageKey: string;\n\n  constructor(initialData: T[], storageKey: string) {\n    this.storageKey = storageKey;\n    this.data = this.loadFromStorage() || initialData;\n  }\n\n  private loadFromStorage(): T[] | null {\n    if (typeof window === 'undefined') return null;\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private saveToStorage(): void {\n    if (typeof window === 'undefined') return;\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.data));\n    } catch {\n      // Ignore storage errors\n    }\n  }\n\n  async getAll(): Promise<T[]> {\n    const cacheKey = `getAll_${this.storageKey}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    await delay(50); // Reduced delay\n    const result = [...this.data];\n    setCachedData(cacheKey, result);\n    return result;\n  }\n\n  async getById(id: string): Promise<T | null> {\n    const cacheKey = `getById_${this.storageKey}_${id}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    await delay(25); // Reduced delay\n    const result = this.data.find(item => item.id === id) || null;\n    setCachedData(cacheKey, result);\n    return result;\n  }\n\n  private invalidateCache(): void {\n    // Clear all cache entries for this storage key\n    for (const key of cache.keys()) {\n      if (key.includes(this.storageKey)) {\n        cache.delete(key);\n      }\n    }\n  }\n\n  async create(item: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<T> {\n    await delay(100); // Reduced delay\n    const newItem = {\n      ...item,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as unknown as T;\n    \n    this.data.push(newItem);\n    this.saveToStorage();\n    this.invalidateCache(); // Clear cache after modification\n    return newItem;\n  }\n\n  async update(id: string, updates: Partial<T>): Promise<T | null> {\n    await delay(75); // Reduced delay\n    const index = this.data.findIndex(item => item.id === id);\n    if (index === -1) return null;\n\n    const updatedItem = {\n      ...this.data[index],\n      ...updates,\n      updatedAt: new Date(),\n    } as T;\n\n    this.data[index] = updatedItem;\n    this.saveToStorage();\n    this.invalidateCache(); // Clear cache after modification\n    return updatedItem;\n  }\n\n  async delete(id: string): Promise<boolean> {\n    await delay(50); // Reduced delay\n    const index = this.data.findIndex(item => item.id === id);\n    if (index === -1) return false;\n\n    this.data.splice(index, 1);\n    this.saveToStorage();\n    this.invalidateCache(); // Clear cache after modification\n    return true;\n  }\n\n  async search(query: string, fields: (keyof T)[]): Promise<T[]> {\n    const cacheKey = `search_${this.storageKey}_${query}_${fields.join(',')}`;\n    const cached = getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    await delay(50); // Reduced delay\n    const lowercaseQuery = query.toLowerCase();\n    const result = this.data.filter(item =>\n      fields.some(field => {\n        const value = item[field];\n        if (typeof value === 'string') {\n          return value.toLowerCase().includes(lowercaseQuery);\n        }\n        return false;\n      })\n    );\n    setCachedData(cacheKey, result);\n    return result;\n  }\n}\n\n// Create API clients for each entity\nexport const usersApi = new MockApiClient(mockUsers, 'medaid_users');\nexport const patientsApi = new MockApiClient(mockPatients, 'medaid_patients');\nexport const nursesApi = new MockApiClient(mockNurses, 'medaid_nurses');\nexport const servicesApi = new MockApiClient(mockServices, 'medaid_services');\nexport const visitsApi = new MockApiClient(mockVisits, 'medaid_visits');\nexport const carePlansApi = new MockApiClient(mockCarePlans, 'medaid_care_plans');\nexport const careTasksApi = new MockApiClient(mockCareTasks, 'medaid_care_tasks');\nexport const vitalsApi = new MockApiClient(mockVitals, 'medaid_vitals');\nexport const medicationEventsApi = new MockApiClient(mockMedicationEvents, 'medaid_medication_events');\nexport const incidentsApi = new MockApiClient(mockIncidents, 'medaid_incidents');\nexport const billingItemsApi = new MockApiClient(mockBillingItems, 'medaid_billing_items');\nexport const certificationsApi = new MockApiClient(mockCertifications, 'medaid_certifications');\n\n// Specialized API methods\nexport const visitsApiExtended = {\n  ...visitsApi,\n  \n  async getByStatus(status: string[]): Promise<Visit[]> {\n    await delay(100);\n    const allVisits = await visitsApi.getAll();\n    return allVisits.filter(visit => status.includes(visit.status));\n  },\n\n  async getByDateRange(startDate: Date, endDate: Date): Promise<Visit[]> {\n    await delay(100);\n    const allVisits = await visitsApi.getAll();\n    return allVisits.filter(visit => \n      visit.date >= startDate && visit.date <= endDate\n    );\n  },\n\n  async getByNurse(nurseId: string): Promise<Visit[]> {\n    await delay(100);\n    const allVisits = await visitsApi.getAll();\n    return allVisits.filter(visit => visit.nurseId === nurseId);\n  },\n\n  async getByPatient(patientId: string): Promise<Visit[]> {\n    await delay(100);\n    const allVisits = await visitsApi.getAll();\n    return allVisits.filter(visit => visit.patientId === patientId);\n  },\n\n  async checkIn(visitId: string, location: { latitude: number; longitude: number; address: string }): Promise<Visit | null> {\n    return visitsApi.update(visitId, {\n      status: 'in_progress',\n      checkInTime: new Date(),\n      location,\n    });\n  },\n\n  async checkOut(visitId: string): Promise<Visit | null> {\n    return visitsApi.update(visitId, {\n      status: 'completed',\n      checkOutTime: new Date(),\n    });\n  },\n};\n\n// Dashboard statistics\nexport const getDashboardStats = async () => {\n  await delay(200);\n  \n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const todayVisits = mockVisits.filter(visit => \n    visit.date >= today && visit.date < tomorrow\n  );\n\n  const activeNurses = mockNurses.filter(nurse => nurse.status === 'active');\n  const openIncidents = mockIncidents.filter(incident => \n    ['open', 'investigating'].includes(incident.status)\n  );\n\n  return {\n    totalPatients: mockPatients.length,\n    activeNurses: activeNurses.length,\n    visitsToday: todayVisits.length,\n    completedVisitsToday: todayVisits.filter(v => v.status === 'completed').length,\n    openIncidents: openIncidents.length,\n    pendingBilling: mockBillingItems.filter(b => b.status === 'pending').length,\n  };\n};\n\n// Authentication\nexport const authApi = {\n  async signIn(email: string, password?: string): Promise<User | null> {\n    console.log('Auth API: signIn called with', email, password);\n    await delay(500);\n    \n    // Demo login for testing - accept any email for demo purposes\n    if (email === 'demo@medaid.ca' || email === 'demo' || email === 'test@example.com') {\n      console.log('Auth API: Demo login, returning coordinator user');\n      return mockUsers[1]; // Return coordinator user\n    }\n    \n    // Also accept the actual user emails\n    const user = mockUsers.find(u => u.email === email);\n    if (user && user.isActive) {\n      console.log('Auth API: Found user in mockUsers', user);\n      return { ...user, lastLoginAt: new Date() };\n    }\n    \n    // For demo purposes, accept any email and return coordinator user\n    if (email.includes('@') && email.length > 5) {\n      console.log('Auth API: Valid email format, returning coordinator user');\n      return mockUsers[1]; // Return coordinator user for any valid email\n    }\n    \n    console.log('Auth API: No valid login found, returning null');\n    return null;\n  },\n\n  async signOut(): Promise<void> {\n    await delay(100);\n    // In a real app, this would clear server-side session\n  },\n\n  async getCurrentUser(): Promise<User | null> {\n    await delay(100);\n    // In a real app, this would validate the session\n    return null;\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1473, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/app/%28app%29/patients/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Modal, ConfirmDialog } from '@/components/ui/modal';\nimport { patientsApi } from '@/services/api-client';\nimport { formatDate } from '@/lib/utils';\nimport { \n  Users, \n  Search, \n  Plus, \n  Eye, \n  Edit, \n  MessageSquare, \n  X,\n  Phone,\n  Mail,\n  MapPin,\n  Calendar\n} from 'lucide-react';\n\nexport default function PatientsPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n\n  const queryClient = useQueryClient();\n\n  const { data: patients, isLoading } = useQuery({\n    queryKey: ['patients'],\n    queryFn: () => patientsApi.getAll(),\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: (patient: any) => patientsApi.create(patient),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['patients'] });\n      setIsAddModalOpen(false);\n    },\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: any }) => \n      patientsApi.update(id, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['patients'] });\n      setIsEditModalOpen(false);\n    },\n  });\n\n  const deletePatientMutation = useMutation({\n    mutationFn: (id: string) => patientsApi.delete(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['patients'] });\n      setIsDeleteDialogOpen(false);\n    },\n  });\n\n  const handleView = (patient: any) => {\n    setSelectedPatient(patient);\n    setIsViewModalOpen(true);\n  };\n\n  const handleEdit = (patient: any) => {\n    setSelectedPatient(patient);\n    setIsEditModalOpen(true);\n  };\n\n  const handleDelete = (patient: any) => {\n    setSelectedPatient(patient);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleAddPatient = () => {\n    setSelectedPatient(null);\n    setIsAddModalOpen(true);\n  };\n\n  const handleSubmitPatient = (patientData: any) => {\n    if (selectedPatient) {\n      updatePatientMutation.mutate({ id: selectedPatient.id, updates: patientData });\n    } else {\n      createPatientMutation.mutate(patientData);\n    }\n  };\n\n  const handleConfirmDelete = () => {\n    if (selectedPatient) {\n      deletePatientMutation.mutate(selectedPatient.id);\n    }\n  };\n\n  const filteredPatients = patients?.filter(patient => {\n    const matchesSearch = patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         patient.phone?.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesSearch;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Patients</h1>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Patients</h1>\n        <Button onClick={handleAddPatient}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Patient\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Users className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Patients</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{patients?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Calendar className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Patients</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {patients?.filter(p => p.status === 'active').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <Users className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">New This Month</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {patients?.filter(p => {\n                    const created = new Date(p.createdAt);\n                    const now = new Date();\n                    return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear();\n                  }).length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search patients by name or phone...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Patients Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Patients</CardTitle>\n          <CardDescription>\n            Manage all patients in your care\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"border-b border-gray-200\">\n                <tr>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-700\">Patient</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-700\">Contact</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-700\">Address</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-700\">Date Added</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-700\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-100\">\n                {filteredPatients.map((patient) => (\n                  <tr key={patient.id} className=\"hover:bg-gray-50\">\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-semibold text-blue-700\">\n                            {patient.name.charAt(0)}\n                          </span>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{patient.name}</div>\n                          <div className=\"text-sm text-gray-500\">ID: {patient.id}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center text-sm text-gray-600\">\n                          <Phone className=\"h-4 w-4 mr-2\" />\n                          {patient.phone || 'N/A'}\n                        </div>\n                        {patient.email && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Mail className=\"h-4 w-4 mr-2\" />\n                            {patient.email}\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        <span className=\"truncate max-w-xs\">\n                          {typeof patient.address === 'string' ? patient.address : \n                           patient.address ? `${patient.address.street}, ${patient.address.city}` : 'N/A'}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-600\">\n                      {formatDate(patient.createdAt)}\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <div className=\"flex items-center justify-center space-x-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => handleView(patient)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => handleEdit(patient)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => handleDelete(patient)}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            {filteredPatients.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No patients found</h3>\n                <p className=\"text-gray-500\">No patients match your search criteria.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Add/Edit Modal */}\n      <Modal\n        isOpen={isAddModalOpen || isEditModalOpen}\n        onClose={() => {\n          setIsAddModalOpen(false);\n          setIsEditModalOpen(false);\n        }}\n        title={selectedPatient ? 'Edit Patient' : 'Add New Patient'}\n      >\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Full Name\n            </label>\n            <Input\n              placeholder=\"Enter patient's full name\"\n              defaultValue={selectedPatient?.name || ''}\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Phone\n              </label>\n              <Input\n                placeholder=\"Phone number\"\n                defaultValue={selectedPatient?.phone || ''}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Email\n              </label>\n              <Input\n                placeholder=\"Email address\"\n                defaultValue={selectedPatient?.email || ''}\n              />\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Address\n            </label>\n            <Input\n              placeholder=\"Full address\"\n              defaultValue={typeof selectedPatient?.address === 'string' ? selectedPatient.address : \n                          selectedPatient?.address ? `${selectedPatient.address.street}, ${selectedPatient.address.city}` : ''}\n            />\n          </div>\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsAddModalOpen(false);\n                setIsEditModalOpen(false);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button onClick={() => handleSubmitPatient({})}>\n              {selectedPatient ? 'Update' : 'Add'} Patient\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      {/* View Modal */}\n      <Modal\n        isOpen={isViewModalOpen}\n        onClose={() => setIsViewModalOpen(false)}\n        title=\"Patient Details\"\n      >\n        {selectedPatient && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Full Name\n              </label>\n              <p className=\"text-gray-900\">{selectedPatient.name}</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Phone\n                </label>\n                <p className=\"text-gray-900\">{selectedPatient.phone || 'N/A'}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Email\n                </label>\n                <p className=\"text-gray-900\">{selectedPatient.email || 'N/A'}</p>\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Address\n              </label>\n              <p className=\"text-gray-900\">\n                {typeof selectedPatient.address === 'string' ? selectedPatient.address : \n                 selectedPatient.address ? `${selectedPatient.address.street}, ${selectedPatient.address.city}, ${selectedPatient.address.province} ${selectedPatient.address.postalCode}` : 'N/A'}\n              </p>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Date Added\n              </label>\n              <p className=\"text-gray-900\">{formatDate(selectedPatient.createdAt)}</p>\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Delete Confirmation */}\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={() => setIsDeleteDialogOpen(false)}\n        onConfirm={handleConfirmDelete}\n        title=\"Delete Patient\"\n        description=\"Are you sure you want to delete this patient? This action cannot be undone.\"\n      />\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}