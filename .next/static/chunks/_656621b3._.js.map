{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/lib/mock-data.ts"],"sourcesContent":["// Mock data for frontend development\n// Replace with real API calls when backend is added\n\n// Error handling wrapper for data access\nconst safeDataAccess = <T>(data: T[], fallback: T[] = []): T[] => {\n  try {\n    return Array.isArray(data) ? data : fallback;\n  } catch (error) {\n    console.error('Error accessing mock data:', error);\n    return fallback;\n  }\n};\n\nexport const mockPatients = [\n  { \n    id: '1', \n    name: 'John Doe', \n    email: 'john.doe@email.com',\n    phone: '(555) 123-4567',\n    status: 'active',\n    dateOfBirth: '1985-03-15',\n    address: '123 Main St, Toronto, ON',\n    emergencyContact: 'Jane Doe - (555) 987-6543'\n  },\n  { \n    id: '2', \n    name: 'Jane Smith', \n    email: 'jane.smith@email.com',\n    phone: '(555) 234-5678',\n    status: 'active',\n    dateOfBirth: '1990-07-22',\n    address: '456 Oak Ave, Toronto, ON',\n    emergencyContact: 'Bob Smith - (555) 876-5432'\n  },\n  { \n    id: '3', \n    name: 'Bob Johnson', \n    email: 'bob.johnson@email.com',\n    phone: '(555) 345-6789',\n    status: 'inactive',\n    dateOfBirth: '1978-11-08',\n    address: '789 Pine Rd, Toronto, ON',\n    emergencyContact: 'Mary Johnson - (555) 765-4321'\n  }\n];\n\nexport const mockNurses = [\n  { \n    id: '1', \n    name: 'Sarah Wilson', \n    email: 'sarah.wilson@medaid.ca',\n    phone: '(555) 111-2222',\n    status: 'active',\n    specialty: 'General Care',\n    licenseNumber: 'RN123456',\n    experience: '5 years'\n  },\n  { \n    id: '2', \n    name: 'Mike Brown', \n    email: 'mike.brown@medaid.ca',\n    phone: '(555) 333-4444',\n    status: 'active',\n    specialty: 'Critical Care',\n    licenseNumber: 'RN789012',\n    experience: '8 years'\n  },\n  { \n    id: '3', \n    name: 'Lisa Davis', \n    email: 'lisa.davis@medaid.ca',\n    phone: '(555) 555-6666',\n    status: 'inactive',\n    specialty: 'Pediatrics',\n    licenseNumber: 'RN345678',\n    experience: '3 years'\n  }\n];\n\nexport const mockVisits = [\n  {\n    id: '1',\n    patientId: '1',\n    nurseId: '1',\n    patientName: 'John Doe',\n    nurseName: 'Sarah Wilson',\n    date: '2024-01-15T09:00:00.000Z',\n    time: '09:00',\n    status: 'scheduled',\n    type: 'routine',\n    notes: 'Regular checkup',\n    address: '123 Main St, Toronto, ON'\n  },\n  {\n    id: '2',\n    patientId: '2',\n    nurseId: '2',\n    patientName: 'Jane Smith',\n    nurseName: 'Mike Brown',\n    date: '2024-01-15T10:30:00.000Z',\n    time: '10:30',\n    status: 'completed',\n    type: 'follow-up',\n    notes: 'Post-surgery check',\n    address: '456 Oak Ave, Toronto, ON'\n  },\n  {\n    id: '3',\n    patientId: '1',\n    nurseId: '2',\n    patientName: 'John Doe',\n    nurseName: 'Mike Brown',\n    date: '2024-01-16T14:00:00.000Z', // Tomorrow\n    time: '14:00',\n    status: 'scheduled',\n    type: 'urgent',\n    notes: 'Follow-up appointment',\n    address: '123 Main St, Toronto, ON'\n  }\n];\n\nexport const mockIncidents = [\n  {\n    id: '1',\n    title: 'Medication Error',\n    description: 'Incorrect dosage administered to patient',\n    status: 'open',\n    priority: 'high',\n    reportedBy: 'Sarah Wilson',\n    reportedAt: '2024-01-15T08:30:00.000Z',\n    assignedTo: 'Mike Brown',\n    createdAt: '2024-01-15T08:30:00.000Z'\n  },\n  {\n    id: '2',\n    title: 'Equipment Malfunction',\n    description: 'Blood pressure monitor not working properly',\n    status: 'investigating',\n    priority: 'medium',\n    reportedBy: 'Mike Brown',\n    reportedAt: '2024-01-15T09:15:00.000Z',\n    assignedTo: 'Lisa Davis',\n    createdAt: '2024-01-15T09:15:00.000Z'\n  },\n  {\n    id: '3',\n    title: 'Patient Fall',\n    description: 'Patient fell in bathroom during visit',\n    status: 'resolved',\n    priority: 'high',\n    reportedBy: 'Sarah Wilson',\n    reportedAt: '2024-01-14T14:20:00.000Z',\n    assignedTo: 'Mike Brown',\n    createdAt: '2024-01-14T14:20:00.000Z'\n  }\n];\n\nexport const mockBillingItems = [\n  {\n    id: '1',\n    patientId: '1',\n    patientName: 'John Doe',\n    service: 'Home Visit - Routine',\n    amount: 150.00,\n    status: 'pending',\n    date: '2024-01-15T09:00:00.000Z',\n    dueDate: '2024-02-14T23:59:59.000Z'\n  },\n  {\n    id: '2',\n    patientId: '2',\n    patientName: 'Jane Smith',\n    service: 'Home Visit - Follow-up',\n    amount: 200.00,\n    status: 'paid',\n    date: '2024-01-15T10:30:00.000Z',\n    dueDate: '2024-02-14T23:59:59.000Z'\n  }\n];\n\nexport const mockServices = [\n  {\n    id: '1',\n    name: 'Home Visit - Routine Checkup',\n    description: 'Comprehensive health assessment and routine checkup at patient\\'s home',\n    category: 'Medical Care',\n    price: 150.00,\n    duration: 60,\n    status: 'active',\n    createdAt: '2024-01-15T08:00:00.000Z'\n  },\n  {\n    id: '2',\n    name: 'Medication Administration',\n    description: 'Professional medication administration and monitoring',\n    category: 'Medical Care',\n    price: 75.00,\n    duration: 30,\n    status: 'active',\n    createdAt: '2024-01-15T08:30:00.000Z'\n  },\n  {\n    id: '3',\n    name: 'Wound Care',\n    description: 'Specialized wound cleaning, dressing, and monitoring',\n    category: 'Specialized Care',\n    price: 200.00,\n    duration: 45,\n    status: 'active',\n    createdAt: '2024-01-15T09:00:00.000Z'\n  },\n  {\n    id: '4',\n    name: 'Physical Therapy',\n    description: 'Rehabilitation exercises and mobility assistance',\n    category: 'Therapy',\n    price: 120.00,\n    duration: 45,\n    status: 'active',\n    createdAt: '2024-01-15T09:30:00.000Z'\n  },\n  {\n    id: '5',\n    name: 'Emergency Response',\n    description: '24/7 emergency medical response and assessment',\n    category: 'Emergency',\n    price: 300.00,\n    duration: 90,\n    status: 'active',\n    createdAt: '2024-01-15T10:00:00.000Z'\n  },\n  {\n    id: '6',\n    name: 'Health Education',\n    description: 'Patient and family health education and counseling',\n    category: 'Education',\n    price: 80.00,\n    duration: 30,\n    status: 'active',\n    createdAt: '2024-01-15T10:30:00.000Z'\n  }\n];\n\nexport const mockCertifications = [\n  {\n    id: '1',\n    name: 'Registered Nurse (RN)',\n    issuer: 'Ontario College of Nurses',\n    nurseId: '1',\n    nurseName: 'Sarah Wilson',\n    issueDate: '2022-01-15T00:00:00.000Z',\n    expiryDate: '2025-01-15T00:00:00.000Z',\n    status: 'valid',\n    certificateNumber: 'RN-2022-001',\n    createdAt: '2024-01-15T08:00:00.000Z'\n  },\n  {\n    id: '2',\n    name: 'CPR Certification',\n    issuer: 'Canadian Red Cross',\n    nurseId: '1',\n    nurseName: 'Sarah Wilson',\n    issueDate: '2023-06-01T00:00:00.000Z',\n    expiryDate: '2024-06-01T00:00:00.000Z',\n    status: 'expiring',\n    certificateNumber: 'CPR-2023-001',\n    createdAt: '2024-01-15T08:30:00.000Z'\n  },\n  {\n    id: '3',\n    name: 'Advanced Cardiac Life Support (ACLS)',\n    issuer: 'American Heart Association',\n    nurseId: '2',\n    nurseName: 'Mike Brown',\n    issueDate: '2021-03-10T00:00:00.000Z',\n    expiryDate: '2023-03-10T00:00:00.000Z',\n    status: 'expired',\n    certificateNumber: 'ACLS-2021-001',\n    createdAt: '2024-01-15T09:00:00.000Z'\n  },\n  {\n    id: '4',\n    name: 'Wound Care Specialist',\n    issuer: 'Wound Care Education Institute',\n    nurseId: '2',\n    nurseName: 'Mike Brown',\n    issueDate: '2023-08-20T00:00:00.000Z',\n    expiryDate: '2026-08-20T00:00:00.000Z',\n    status: 'valid',\n    certificateNumber: 'WCS-2023-001',\n    createdAt: '2024-01-15T09:30:00.000Z'\n  },\n  {\n    id: '5',\n    name: 'Pediatric Advanced Life Support (PALS)',\n    issuer: 'American Heart Association',\n    nurseId: '3',\n    nurseName: 'Emily Davis',\n    issueDate: '2022-11-15T00:00:00.000Z',\n    expiryDate: '2024-11-15T00:00:00.000Z',\n    status: 'expiring',\n    certificateNumber: 'PALS-2022-001',\n    createdAt: '2024-01-15T10:00:00.000Z'\n  },\n  {\n    id: '6',\n    name: 'Geriatric Care Specialist',\n    issuer: 'National Association of Geriatric Care',\n    nurseId: '3',\n    nurseName: 'Emily Davis',\n    issueDate: '2023-01-10T00:00:00.000Z',\n    expiryDate: '2026-01-10T00:00:00.000Z',\n    status: 'valid',\n    certificateNumber: 'GCS-2023-001',\n    createdAt: '2024-01-15T10:30:00.000Z'\n  }\n];\n\n// Safe exports with error handling\nexport const getMockPatients = () => safeDataAccess(mockPatients);\nexport const getMockNurses = () => safeDataAccess(mockNurses);\nexport const getMockVisits = () => safeDataAccess(mockVisits);\nexport const getMockIncidents = () => safeDataAccess(mockIncidents);\nexport const getMockBillingItems = () => safeDataAccess(mockBillingItems);\nexport const getMockServices = () => safeDataAccess(mockServices);\nexport const getMockCertifications = () => safeDataAccess(mockCertifications);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/josue/OneDrive/Desktop/MedAid/app/%28app%29/schedule/page.tsx"],"sourcesContent":["'use client';\n\n// Force rebuild to clear cache\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Modal } from '@/components/ui/modal';\nimport { VisitForm } from '@/components/forms/visit-form';\nimport { mockVisits, mockNurses, mockPatients, mockServices } from '@/lib/mock-data';\nimport { formatDate, formatTime, getInitials } from '@/lib/utils';\nimport {\n  Calendar,\n  Plus,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  User,\n  MapPin,\n  Eye,\n  Edit,\n  Trash2\n} from 'lucide-react';\n\nexport default function SchedulePage() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedVisit, setSelectedVisit] = useState<any>(null);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  // Use mock data instead of API calls\n  const visits = mockVisits;\n  const nurses = mockNurses;\n  const patients = mockPatients;\n  const visitsLoading = false; // Set to false as we are using mock data\n\n  const getNurseName = (nurseId: string) => {\n    return nurses?.find(n => n.id === nurseId)?.name || 'Unknown Nurse';\n  };\n\n  const getPatientName = (patientId: string) => {\n    return patients?.find(p => p.id === patientId)?.name || 'Unknown Patient';\n  };\n\n  const getStatusText = (status: string) => {\n    const statusConfig = {\n      scheduled: 'Scheduled',\n      completed: 'Completed',\n      cancelled: 'Cancelled',\n      in_progress: 'In Progress'\n    };\n    \n    return statusConfig[status as keyof typeof statusConfig] || status;\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (direction === 'prev') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setMonth(newDate.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n    \n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day));\n    }\n    \n    return days;\n  };\n\n  const getVisitsForDate = (date: Date) => {\n    if (!visits) return [];\n    return visits.filter(visit => {\n      const visitDate = new Date(visit.date);\n      return visitDate.toDateString() === date.toDateString();\n    });\n  };\n\n  const handleAddVisit = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const handleSubmitVisit = (visitData: any) => {\n    console.log('New visit data:', visitData);\n    // TODO: Add API call to create visit\n    setIsAddModalOpen(false);\n    // Show success message or refresh data\n  };\n\n  const days = getDaysInMonth(currentDate);\n  const monthName = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });\n\n  if (visitsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Schedule</h1>\n        </div>\n        <div className=\"grid grid-cols-7 gap-4\">\n          {Array.from({ length: 35 }).map((_, i) => (\n            <Card key={i} className=\"h-32\">\n              <CardContent className=\"p-4\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Schedule</h1>\n        <Button onClick={handleAddVisit} variant=\"primary\" size=\"lg\" className=\"shadow-lg\">\n          <Plus className=\"h-5 w-5 mr-2\" />\n          Add Visit\n        </Button>\n      </div>\n\n      {/* Calendar Navigation */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigateMonth('prev')}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <h2 className=\"text-xl font-semibold\">{monthName}</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigateMonth('next')}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentDate(new Date())}\n            >\n              Today\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"grid grid-cols-7 gap-1 mb-4\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"p-2 text-center text-sm font-medium text-gray-500\">\n                {day}\n              </div>\n            ))}\n            {days.map((day, index) => (\n              <div\n                key={index}\n                className={`min-h-[120px] p-2 border border-gray-200 ${\n                  day ? 'bg-white hover:bg-gray-50' : 'bg-gray-50'\n                }`}\n              >\n                {day && (\n                  <>\n                    <div className=\"text-sm font-medium text-gray-900 mb-2\">\n                      {day.getDate()}\n                    </div>\n                    <div className=\"space-y-1\">\n                      {getVisitsForDate(day).slice(0, 3).map(visit => (\n                        <div\n                          key={visit.id}\n                          className=\"text-xs p-1 bg-blue-100 text-blue-800 rounded cursor-pointer hover:bg-blue-200\"\n                          onClick={() => setSelectedVisit(visit)}\n                        >\n                          <div className=\"font-medium\">{visit.time}</div>\n                          <div className=\"truncate\">{getPatientName(visit.patientId)}</div>\n                        </div>\n                      ))}\n                      {getVisitsForDate(day).length > 3 && (\n                        <div className=\"text-xs text-gray-500\">\n                          +{getVisitsForDate(day).length - 3} more\n                        </div>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Today's Visits Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"h-5 w-5 mr-2\" />\n            Today's Visits ({getVisitsForDate(new Date()).length})\n          </CardTitle>\n          <CardDescription>\n            Visits scheduled for today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {getVisitsForDate(new Date()).length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Time</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Patient</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Nurse</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Type</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Status</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Address</th>\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {getVisitsForDate(new Date()).map((visit) => (\n                    <tr key={visit.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span className=\"font-medium text-gray-900\">{visit.time}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span className=\"font-medium text-gray-900\">\n                            {getPatientName(visit.patientId)}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span className=\"text-gray-700\">\n                            {getNurseName(visit.nurseId)}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <span className=\"text-gray-700 capitalize\">{visit.type}</span>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <span className=\"text-gray-700\">\n                          {getStatusText(visit.status)}\n                        </span>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center max-w-xs\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-gray-500 flex-shrink-0\" />\n                          <span className=\"text-gray-700 truncate\">{visit.address}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedVisit(visit)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"destructive\" size=\"sm\">\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No visits today</h3>\n              <p className=\"text-gray-600\">All caught up! No visits scheduled for today.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Visit Details Modal */}\n      {selectedVisit && (\n        <Card className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n          <Card className=\"w-full max-w-2xl mx-4\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Visit Details</CardTitle>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedVisit(null)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Patient</p>\n                  <p className=\"text-gray-900\">{getPatientName(selectedVisit.patientId)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Nurse</p>\n                  <p className=\"text-gray-900\">{getNurseName(selectedVisit.nurseId)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Date</p>\n                  <p className=\"text-gray-900\">{formatDate(selectedVisit.date)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Time</p>\n                  <p className=\"text-gray-900\">{selectedVisit.time}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Type</p>\n                  <p className=\"text-gray-900 capitalize\">{selectedVisit.type}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Status</p>\n                  <Badge variant={selectedVisit.status === 'scheduled' ? 'default' : 'secondary'}>\n                    {selectedVisit.status}\n                  </Badge>\n                </div>\n                <div className=\"col-span-2\">\n                  <p className=\"text-sm font-medium text-gray-600\">Address</p>\n                  <p className=\"text-gray-900\">{selectedVisit.address}</p>\n                </div>\n                <div className=\"col-span-2\">\n                  <p className=\"text-sm font-medium text-gray-600\">Notes</p>\n                  <p className=\"text-gray-900\">{selectedVisit.notes || 'No notes available'}</p>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setSelectedVisit(null)}>\n                  Close\n                </Button>\n                <Button variant=\"primary\">\n                  Edit Visit\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </Card>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}